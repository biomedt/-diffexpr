##install packages
BiocManager::install('limma')
install.packages('edgeR')
install.packages('DESeq2')
install.packages('ggplot2')
install.packages("VennDiagram")

##DE analysis
diffexpr <- function(expr, ##matrix
                     method, ##DESeq2,limma,wilcox,edgeR
                     N,##control group count
                     M,##model group count
                     p.adjust=TRUE,##use p.adj or pval for volcano
                     log2FC.cutoff=1,##FC cut off
                     size=15,##word size
                     colors=c("#4DBBD5", "grey", "#E64B35"),##volcano colors
                     width=5,
                     height=5){
  ##loading packages
  library(limma)
  library(edgeR)
  library(DESeq2)
  library(ggplot2)
  
  ##set group and colors
  cols <- rainbow(ncol(expr)*1.2)
  group_list <- factor(c(rep("N",N),rep("M",M)),levels = c("N","M"))
  
  ##integrate duplicated genes in average and remove rows conssitently have zero or very low counts
  expr2 <- avereps(expr[,-c(1)],ID=expr[,1])
  expr2 <- as.matrix(expr2)
  expr2 <- DGEList(counts=expr2,group=group_list)
  keep <- filterByExpr(expr2)
  expr2 <- expr2[keep,keep.lib.sizes=FALSE]
  count_dat <- expr2[["counts"]]
  
  ##diffexpr
  if(method == 'DESeq2'){
    colDate <- data.frame(row.names =colnames(count_dat),
                          condition=group_list)
    dds<-DESeqDataSetFromMatrix(countData = count_dat,
                                colData = colDate,design = ~condition)
    dds<-DESeq(dds)
    res<-results(dds)
    res<-as.data.frame(res)
    res<-cbind(rownames(res),res) 
    colnames(res)<- c('geng_id',"baseMean" ,"log2FoldChange","lfcSE" ,"stat","pvalue","padj" )
    rld <- rlogTransformation(dds) 
    count_norm=assay(rld)
  } else if(method == 'limma'){
    expr2 <- calcNormFactors(expr2)
    count_norm <- cpm(expr2, log=TRUE, prior.count=3)
    count_norm<-as.data.frame(count_norm)
    
    design <- model.matrix(~0+factor(group_list))
    colnames(design) <- levels(factor(group_list))
    rownames(design) <- colnames(count_norm)
    contrast.matrix<-makeContrasts("M-N",levels = design)
    
    fit<-lmFit(count_norm,design)
    fit2<-contrasts.fit(fit,contrast.matrix)
    fit2<-eBayes(fit2)
    options(digits = 4) 
    res<-topTable(fit2,coef = 1,n=Inf)
    res<-na.omit(res)
    colnames(res)=c("log2FoldChange","AveExpr","t","pvalue","padj","B")
    } else if (method == 'wilcox'){
      expr2 <- calcNormFactors(expr2)
      count_norm <- cpm(expr2, log=TRUE, prior.count=3)
      count_norm<-as.data.frame(count_norm)
      conditionsLevel<-levels(group_list)
      pvalues <- sapply(1:nrow(count_norm),function(i){
        data<-cbind.data.frame(gene=as.numeric(t(count_norm[i,])),group_list)
        p=wilcox.test(gene~group_list, data)$p.value
        return(p)
      })
      fdr=p.adjust(pvalues,method = "fdr")
      
      dataCon1=count_norm[,c(which(group_list==conditionsLevel[1]))]
      dataCon2=count_norm[,c(which(group_list==conditionsLevel[2]))]
      foldChanges=rowMeans(dataCon2)-rowMeans(dataCon1)
      
      res<-data.frame(log2FoldChange=foldChanges, pvalue=pvalues, padj=fdr)
      rownames(res)=rownames(count_norm)
      res=na.omit(res)
    } else if (method=='edgeR'){
      expr2 <- calcNormFactors(expr2)
      expr2 <- estimateCommonDisp(expr2)
      expr2 <- estimateTagwiseDisp(expr2)
      et <- exactTest(expr2,pair = c("N","M"))
      topTags(et)
      ordered_tags <- topTags(et, n=100000)
      allDiff=ordered_tags$table
      allDiff=allDiff[is.na(allDiff$FDR)==FALSE,]
      res=allDiff
      colnames(res)=c("log2FoldChange","logCPM","pvalue","padj")
      count_norm=expr2$pseudo.counts
    }
  
  ##batch effect
  pdf(file = "batch.pdf",width,height)
  par(mfrow=c(1,2),cex = 0.5)
  boxplot(count_dat,boxwex=0.6, notch=T,cex=0.08,las=2,col=cols,main="count value")
  boxplot(count_norm,boxwex=0.6, notch=T,cex=0.08,las=2,col=cols,main="Normalized value")
  dev.off()
  
  ##add change into res and volcano plot
  if(p.adjust==TRUE){
    res$Change=ifelse(res$padj < 0.05 & abs(res$log2FoldChange) > log2FC.cutoff,
                      ifelse(res$log2FoldChange > log2FC.cutoff, 'Up', 'Down'),'NOT')
    yname='-log10(p.adjust)'
    p1 <- ggplot(data = res, 
                 aes(x = log2FoldChange, 
                     y = -log10(padj),
                     colour = Change,fill=Change))
  } else {
    res$Change=ifelse(res$pvalue < 0.05 & abs(res$log2FoldChange) > log2FC.cutoff,
                      ifelse(res$log2FoldChange > log2FC.cutoff, 'Up', 'Down'),'NOT')
    yname='-log10(p.value)'
    p1 <- ggplot(data = res, 
                 aes(x = log2FoldChange, 
                     y = -log10(pvalue),
                     colour = Change,fill=Change))
  }
  
  p2 <- p1+geom_point(alpha = 0.5,size=5)+
    scale_colour_manual(values =colors)+
    xlab('log2(Fold change)')+ylab(yname)+
    geom_hline(yintercept = -log10(0.05),lty=2,lwd=0.6,alpha=0.8)+
    geom_vline(xintercept = c(log2FC.cutoff,-log2FC.cutoff),
               lty=2,lwd=0.6,alpha=0.8)+
    theme_bw()+theme(panel.border = element_blank(),
                     axis.text = element_text(size = size, colour = "black"), 
                     axis.title = element_text(size = size+2),
                     axis.line = element_line(colour = "black"),
                     legend.position = "none")
  
  ##output res
  res$gene <- rownames(res)
  output=list(count_dat=data.frame(count_dat),
              count_norm=data.frame(count_norm),
              result=res,
              vol=p2)
 
  return(output)
}



meth <- c('DESeq2','limma','wilcox','edgeR')
all=list()
DE_list=list()
for (i in 1:length(meth)) {
  output1 <- diffexpr(expr = rnaCount,N=5,M=5,method = meth[i],p.adjust=FALSE)
  output1 <- output1[['result']]
  output2 <- subset(output1,Change=='Up'|Change=='Down')
  output2 <- output2[,c('gene','Change')]
  output2 <- split(output1$gene,output1$Change)
  DE_list[[meth[i]]] <- output2
  all[[meth[i]]] <- output1 
}  

library(VennDiagram) 
upreg <-list(DESeq2=DE_list[["DESeq2"]][["Up"]],
             limma=DE_list[["limma"]][["Up"]],
             Wilcox=DE_list[["wilcox"]][["Up"]],
             edgeR=DE_list[["edgeR"]][["Up"]])
downreg <-list(DESeq2=DE_list[["DESeq2"]][["Down"]],
               limma=DE_list[["limma"]][["Down"]],
               Wilcox=DE_list[["wilcox"]][["Down"]],
               edgeR=DE_list[["edgeR"]][["Down"]])
venn.diagram(
  x = upreg,
  fill = c("#3C5488B2","#00A087B2", 
           "#F39B7FB2","#91D1C2B2"),
  alpha = 0.50, cex = 1, 
   cat.cex = 1, margin = 0,
  filename = 'venn.tiff'
)
venn.diagram(
  x = downreg,
  fill = c("#3C5488B2","#00A087B2", 
           "#F39B7FB2","#91D1C2B2"),
  alpha = 0.50, cex = 1, 
  cat.cex = 1, margin = 0,
  filename = 'venn_downreg.tiff'
)
##提取下调交集基因
inter_downreg <- get.venn.partitions(downreg)
for (i in 1:nrow(inter_downreg)) inter_downreg[i,'values'] <- paste(inter_downreg[[i,'..values..']], collapse = '|')
inter_downreg <- subset(inter_downreg, select = -..values.. )
inter_downreg <- subset(inter_downreg, select = -..set.. )
##提取上调交集基因
inter_upreg <- get.venn.partitions(upreg)
for (i in 1:nrow(inter_upreg)) inter_upreg[i,'values'] <- paste(inter_upreg[[i,'..values..']], collapse = '|')
inter_upreg <- subset(inter_upreg, select = -..values.. )
inter_upreg <- subset(inter_upreg, select = -..set.. )
##保存到默认途径
write.csv(inter_upreg,file='inter_upreg.csv')
write.csv(inter_downreg,file='inter_downreg.csv')
